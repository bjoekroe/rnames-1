from .utils.pbdb_import import pbdb_import
from . import models
from django.db import connection
from django.core.exceptions import ObjectDoesNotExist
import pandas as pd
import numpy as np
import re

def create_references(references_map, references_df):
	for index, row in references_df.iterrows():
		doi = ''

		if isinstance(row['doi'], str):
			doi = row['doi']

		ref = models.Reference.objects.filter(title=row['title'], year=row['year'])

		if ref.exists():
			reference = ref[0]
		else:
			reference = models.Reference(
				first_author=row['first_author'],
				year=row['year'],
				title=row['title'],
				doi=doi,
			)
			reference.full_clean()
			reference.save()
			print('Created reference ' + str(reference))

		references_map[row['id']] = reference

def get_structured_name(name_str, location_str, qualifier_name_str, cache):
	try:
		return models.StructuredName.objects.get(
			name__name=name_str,
			location__name=location_str,
			qualifier__qualifier_name__name=qualifier_name_str
		)
	except ObjectDoesNotExist:
		pass

	if name_str in cache['name']:
		name = cache['name'][name_str]
	else:
		name = models.Name.objects.get_or_create(name=name_str)[0]
		cache['name'][name_str] = name

	if location_str in cache['location']:
		location = cache['location'][location_str]
	else:
		location = models.Location.objects.get_or_create(name=location_str)[0]
		cache['location'][location_str] = location

	if qualifier_name_str in cache['qualifier']:
		qualifier = cache['qualifier'][qualifier_name_str]
	else:
		qualifier = models.Qualifier.objects.get(qualifier_name__name=qualifier_name_str)
		cache['qualifier'][qualifier_name_str] = qualifier

	structured_name = models.StructuredName(name=name, location=location, qualifier=qualifier, remarks='Autogenerated by PBDB importer.')
	structured_name.full_clean()
	structured_name.save()
	print('Created structured name ' + str(structured_name))
	return structured_name

def create_relations(references_map, relations_df, cache):
	for index, row in relations_df.iterrows():
		name_one = get_structured_name(
			name_str=row['Name_one'],
			location_str=row['Location_one'],
			qualifier_name_str=row['Qualifier_one'],
			cache=cache
		)

		name_two = get_structured_name(
			name_str=row['Name_two'],
			location_str=row['Location_two'],
			qualifier_name_str=row['Qualifier_two'],
			cache=cache
		)

		if row['Relation'] == 'belongs to':
			belongs_to = 1
		else:
			belongs_to = 0

		if not isinstance(row['Reference'], list):
			row['Reference'] = [row['Reference']]

		for ref_id in row['Reference']:
			reference = references_map[ref_id]
			relation = models.Relation.objects.get_or_create(
				name_one=name_one,
				name_two=name_two,
				belongs_to=belongs_to,
				reference=reference
			)
			created = relation[1]
			relation = relation[0]

			if created:
				print('Created relation ' + str(relation))


def create_structured_names(structured_names_df, cache):
	for index, row in structured_names_df.iterrows():
		get_structured_name(name_str=row['name'], location_str=row['location'], qualifier_name_str=row['qualifier_name'], cache=cache)

def paleobiology_database_import():
	print('Starting pbdb import')

	country_codes_df = pd.DataFrame(list(models.CountryCode.objects.all().values('iso3166_1_alpha_2', 'official_name_en' ,'region_name')))
	country_codes_df.rename(inplace=True, columns={'iso3166_1_alpha_2': 'ISO3166-1-Alpha-2', 'region_name': 'Region Name'})
	data = pbdb_import(country_codes_df)

	connection.connect()

	references_map = {}
	cache = {}
	cache['name'] = {}
	cache['location'] = {}
	cache['qualifier'] = {}

	print('Creating references')
	create_references(references_map, data['references'])
	print('Finished creating references')

	print('Creating relations')
	create_relations(references_map, data['relations'], cache)
	print('Finished creating relations')

	# ensure all structured names are created
	print('Creating structured names')
	create_structured_names(data['structured_names'], cache)
	print('Finished creating structured names')

	print('Finished importing Paleobiology Database')