from .utils.pbdb_import import pbdb_import
from . import models
from django.db import connection
from django.core.exceptions import ObjectDoesNotExist
import pandas as pd
import numpy as np
import re
import datetime

def create_references(references_map, references_df):
	for index, row in references_df.iterrows():
		doi = ''

		if isinstance(row['doi'], str):
			doi = row['doi']

		ref = models.Reference.objects.filter(title=row['title'], year=row['year'])

		if ref.exists():
			reference = ref[0]
		else:
			reference = models.Reference(
				first_author=row['first_author'],
				year=row['year'],
				title=row['title'],
				doi=doi,
			)
			reference.full_clean()
			reference.save()
			print('Created reference ' + str(reference))

		references_map[row['id']] = reference

def create_structured_name_components(structured_names_df, cache):
	create_names = []
	create_locations = []

	for index, row in structured_names_df.iterrows():
		create_names.append(models.Name(name=row['name']))
		create_locations.append(models.Location(name=row['location']))

	models.Name.objects.bulk_create(create_names, ignore_conflicts=True)
	models.Location.objects.bulk_create(create_locations, ignore_conflicts=True)

	for name in models.Name.objects.all():
		cache['name'][name.name] = name

	for location in models.Location.objects.all():
		cache['location'][location.name] = location

	for qualifier in models.Qualifier.objects.all().select_related():
		cache['qualifier'][qualifier.qualifier_name.name] = qualifier

def get_structured_name(name_str, location_str, qualifier_name_str, cache):
	try:
		return models.StructuredName.objects.get(
			name__name=name_str,
			location__name=location_str,
			qualifier__qualifier_name__name=qualifier_name_str
		)
	except ObjectDoesNotExist:
		pass

	name = cache['name'][name_str]
	location = cache['location'][location_str]
	qualifier = cache['qualifier'][qualifier_name_str]

	structured_name = models.StructuredName(name=name, location=location, qualifier=qualifier, remarks='Autogenerated by PBDB importer.')
	structured_name.full_clean()
	structured_name.save()
	print('Created structured name ' + str(structured_name))
	return structured_name

def create_relations(references_map, relations_df, cache):
	create_relations = []
	row_count = str(relations_df.shape[0])
	i = 0
	for index, row in relations_df.iterrows():
		print('Relations row ' + str(i) + '/' + row_count)
		i = i + 1
		name_one = get_structured_name(
			name_str=row['Name_one'],
			location_str=row['Location_one'],
			qualifier_name_str=row['Qualifier_one'],
			cache=cache
		)

		name_two = get_structured_name(
			name_str=row['Name_two'],
			location_str=row['Location_two'],
			qualifier_name_str=row['Qualifier_two'],
			cache=cache
		)

		if row['Relation'] == 'belongs to':
			belongs_to = 1
		else:
			belongs_to = 0

		if not isinstance(row['Reference'], list):
			row['Reference'] = [row['Reference']]

		for ref_id in row['Reference']:
			reference = references_map[ref_id]
			create_relations.append(models.Relation(
				name_one=name_one,
				name_two=name_two,
				belongs_to=belongs_to,
				reference=reference
			))

	models.Relation.objects.bulk_create(create_relations, ignore_conflicts=True)

def pbdb_reference():
	year = datetime.datetime.now().date().year
	title = 'Paleobiology Database'
	return models.Reference.objects.get_or_create(year=year,title=title,)[0]

def paleobiology_database_import():
	print('Starting pbdb import')

	country_codes_df = pd.DataFrame(list(models.CountryCode.objects.all().values('iso3166_1_alpha_2', 'official_name_en' ,'region_name')))
	country_codes_df.rename(inplace=True, columns={'iso3166_1_alpha_2': 'ISO3166-1-Alpha-2', 'region_name': 'Region Name'})
	data = pbdb_import(country_codes_df)

	connection.connect()

	references_map = {}
	references_map['PBDB'] = pbdb_reference()

	cache = {}
	cache['name'] = {}
	cache['location'] = {}
	cache['qualifier'] = {}

	print('Creating structured name components')
	create_structured_name_components(data['structured_names'], cache)
	print('Finished creating structured name components')

	print('Creating references')
	create_references(references_map, data['references'])
	print('Finished creating references')

	print('Creating relations')
	create_relations(references_map, data['relations'], cache)
	print('Finished creating relations')

	print('Finished importing Paleobiology Database')